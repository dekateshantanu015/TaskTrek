(()=>{"use strict";const e={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function t(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}const n={date:t({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:t({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:t({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},r={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function a(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,a=n?.width?String(n.width):t;r=e.formattingValues[a]||e.formattingValues[t]}else{const t=e.defaultWidth,a=n?.width?String(n.width):e.defaultWidth;r=e.values[a]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function o(e){return(t,n={})=>{const r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;const i=o[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],c=Array.isArray(s)?function(e,t){for(let t=0;t<e.length;t++)if(e[t].test(i))return t}(s):function(e,t){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(i))return t}(s);let d;return d=e.valueCallback?e.valueCallback(c):c,d=n.valueCallback?n.valueCallback(d):d,{value:d,rest:t.slice(i.length)}}}var i;const s={code:"en-US",formatDistance:(t,n,r)=>{let a;const o=e[t];return a="string"==typeof o?o:1===n?o.one:o.other.replace("{{count}}",n.toString()),r?.addSuffix?r.comparison&&r.comparison>0?"in "+a:a+" ago":a},formatLong:n,formatRelative:(e,t,n,a)=>r[e],localize:{ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:a({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:a({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:a({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:a({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:a({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(i={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)},(e,t={})=>{const n=e.match(i.matchPattern);if(!n)return null;const r=n[0],a=e.match(i.parsePattern);if(!a)return null;let o=i.valueCallback?i.valueCallback(a[0]):a[0];return o=t.valueCallback?t.valueCallback(o):o,{value:o,rest:e.slice(r.length)}}),era:o({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:o({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:o({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:o({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:o({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let c={};function d(){return c}Math.pow(10,8);const u=6048e5,l=864e5;function m(e){const t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new e.constructor(+e):"number"==typeof e||"[object Number]"===t||"string"==typeof e||"[object String]"===t?new Date(e):new Date(NaN)}function h(e){const t=m(e);return t.setHours(0,0,0,0),t}function f(e){const t=m(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n}function p(e,t){return e instanceof Date?new e.constructor(t):new Date(t)}function g(e){const t=m(e);return function(e,t){const n=h(e),r=h(t),a=+n-f(n),o=+r-f(r);return Math.round((a-o)/l)}(t,function(e){const t=m(e),n=p(e,0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}(t))+1}function w(e,t){const n=d(),r=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,a=m(e),o=a.getDay(),i=(o<r?7:0)+o-r;return a.setDate(a.getDate()-i),a.setHours(0,0,0,0),a}function y(e){return w(e,{weekStartsOn:1})}function b(e){const t=m(e),n=t.getFullYear(),r=p(e,0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);const a=y(r),o=p(e,0);o.setFullYear(n,0,4),o.setHours(0,0,0,0);const i=y(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=i.getTime()?n:n-1}function v(e){const t=m(e),n=+y(t)-+function(e){const t=b(e),n=p(e,0);return n.setFullYear(t,0,4),n.setHours(0,0,0,0),y(n)}(t);return Math.round(n/u)+1}function q(e,t){const n=m(e),r=n.getFullYear(),a=d(),o=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??a.firstWeekContainsDate??a.locale?.options?.firstWeekContainsDate??1,i=p(e,0);i.setFullYear(r+1,0,o),i.setHours(0,0,0,0);const s=w(i,t),c=p(e,0);c.setFullYear(r,0,o),c.setHours(0,0,0,0);const u=w(c,t);return n.getTime()>=s.getTime()?r+1:n.getTime()>=u.getTime()?r:r-1}function x(e,t){const n=m(e),r=+w(n,t)-+function(e,t){const n=d(),r=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,a=q(e,t),o=p(e,0);return o.setFullYear(a,0,r),o.setHours(0,0,0,0),w(o,t)}(n,t);return Math.round(r/u)+1}function T(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}const k={y(e,t){const n=e.getFullYear(),r=n>0?n:1-n;return T("yy"===t?r%100:r,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):T(n+1,2)},d:(e,t)=>T(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>T(e.getHours()%12||12,t.length),H:(e,t)=>T(e.getHours(),t.length),m:(e,t)=>T(e.getMinutes(),t.length),s:(e,t)=>T(e.getSeconds(),t.length),S(e,t){const n=t.length,r=e.getMilliseconds();return T(Math.trunc(r*Math.pow(10,n-3)),t.length)}},S={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return k.y(e,t)},Y:function(e,t,n,r){const a=q(e,r),o=a>0?a:1-a;return"YY"===t?T(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):T(o,t.length)},R:function(e,t){return T(b(e),t.length)},u:function(e,t){return T(e.getFullYear(),t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return T(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return T(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return k.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return T(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const a=x(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):T(a,t.length)},I:function(e,t,n){const r=v(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):T(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):k.d(e,t)},D:function(e,t,n){const r=g(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):T(r,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const a=e.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return T(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const a=e.getDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return T(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return T(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let a;switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let a;switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return k.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):k.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):T(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):T(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):k.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):k.s(e,t)},S:function(e,t){return k.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return L(r);case"XXXX":case"XX":return E(r);default:return E(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return L(r);case"xxxx":case"xx":return E(r);default:return E(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+M(r,":");default:return"GMT"+E(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+M(r,":");default:return"GMT"+E(r,":")}},t:function(e,t,n){return T(Math.trunc(e.getTime()/1e3),t.length)},T:function(e,t,n){return T(e.getTime(),t.length)}};function M(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),a=Math.trunc(r/60),o=r%60;return 0===o?n+String(a):n+String(a)+t+T(o,2)}function L(e,t){return e%60==0?(e>0?"-":"+")+T(Math.abs(e)/60,2):E(e,t)}function E(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+T(Math.trunc(r/60),2)+t+T(r%60,2)}const D=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},P=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},j={p:P,P:(e,t)=>{const n=e.match(/(P+)(p+)?/)||[],r=n[1],a=n[2];if(!a)return D(e,t);let o;switch(r){case"P":o=t.dateTime({width:"short"});break;case"PP":o=t.dateTime({width:"medium"});break;case"PPP":o=t.dateTime({width:"long"});break;default:o=t.dateTime({width:"full"})}return o.replace("{{date}}",D(r,t)).replace("{{time}}",P(a,t))}},C=/^D+$/,A=/^Y+$/,W=["D","DD","YY","YYYY"];function N(e){if(!(t=e,t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)||"number"==typeof e))return!1;var t;const n=m(e);return!isNaN(Number(n))}const Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Y=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,O=/^'([^]*?)'?$/,H=/''/g,F=/[a-zA-Z]/;function z(e,t,n){const r=d(),a=n?.locale??r.locale??s,o=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,i=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??r.weekStartsOn??r.locale?.options?.weekStartsOn??0,c=m(e);if(!N(c))throw new RangeError("Invalid time value");let u=t.match(Y).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,j[t])(e,a.formatLong):e})).join("").match(Q).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:I(e)};if(S[t])return{isToken:!0,value:e};if(t.match(F))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));a.localize.preprocessor&&(u=a.localize.preprocessor(c,u));const l={firstWeekContainsDate:o,weekStartsOn:i,locale:a};return u.map((r=>{if(!r.isToken)return r.value;const o=r.value;return(!n?.useAdditionalWeekYearTokens&&function(e){return A.test(e)}(o)||!n?.useAdditionalDayOfYearTokens&&function(e){return C.test(e)}(o))&&function(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),W.includes(e))throw new RangeError(r)}(o,t,String(e)),(0,S[o[0]])(c,o,a.localize,l)})).join("")}function I(e){const t=e.match(O);return t?t[1].replace(H,"'"):e}const G="todolist.projects",$=JSON.parse(localStorage.getItem(G))||[],V=()=>{localStorage.setItem(G,JSON.stringify($))},B=(e,t)=>{e.isTrash?(ve(e),$.splice(t,1),Z()):(e.isTrash=!0,X(),Se()),console.log($),X()},X=()=>{const e=document.querySelector("#projects-list");e.textContent="",$.forEach(((t,n)=>{if(t.iD=n,!1===t.isTrash){const r=ie("header-nav-item",t.title);r.addEventListener("click",(()=>Me(t,n))),e.append(r)}})),V()},Z=()=>{document.querySelector(".project-container").innerText="",$.forEach(((e,t)=>{e.isTrash&&se(e,t)})),V()},J=document.querySelector(".modal"),U=document.querySelector(".modal-form");document.querySelector(".modal-form-close").addEventListener("click",(e=>{e.preventDefault(),J.classList.add("display-none"),U.removeEventListener("submit",K),U.removeEventListener("submit",_),U.removeEventListener("submit",ee),U.removeEventListener("submit",te)}));const R=()=>{le("Create new Todo"),U.addEventListener("submit",K),J.classList.remove("display-none")},K=e=>{const t=document.querySelector(".main-container").getAttribute("data-id"),n=document.querySelector(".modal-form-title-input"),r=document.querySelector(".modal-form-date-input"),a=document.querySelector(".modal-form-prio-input");e.preventDefault(),ge(t,n.value,r.value,a.checked),J.classList.add("display-none"),U.removeEventListener("submit",K)},_=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input"),r=document.querySelector(".modal-form-prio-input");e.preventDefault(),ye(e.currentTarget.currentIndex,t.value,n.value,r.checked),J.classList.add("display-none"),U.removeEventListener("submit",_)},ee=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");e.preventDefault(),((e,t)=>{const n=((e,t)=>(isTrash=!1,{title:e,desc:t,isTrash}))(e,t);$.push(n),console.log($),X()})(t.value,n.value),J.classList.add("display-none"),U.removeEventListener("submit",ee)},te=e=>{const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");e.preventDefault(),((e,t,n)=>{const r=$[e.iD];r.title=t,r.desc=n,X(),Me(e,e.iD)})(e.currentTarget.currentProject,t.value,n.value),J.classList.add("display-none"),U.removeEventListener("submit",te)},ne=e=>{const t=document.createElement("div");return t.classList.add(e),t},re=e=>{const t=document.createElement("h1");return t.classList.add(e),t},ae=e=>{const t=document.createElement("p");return t.classList.add(e),t},oe=e=>{const t=document.createElement("button");return t.classList.add(e),t},ie=(e,t)=>{const n=document.createElement("li"),r=document.createElement("a");return n.classList.add(e),r.classList.add(`${e}-link`),r.setAttribute("href","#"),r.append(he("arrow"),t),n.append(r),n},se=(e,t)=>{const n=document.querySelector(".project-container"),r=ne("project-card"),a=ae("project-card-title"),o=oe("project-card-delete"),i=oe("project-card-restore"),s=ne("project-btn-container");a.innerText=e.title,o.append(he("delete")),o.addEventListener("click",(()=>B(e,t))),i.append(he("restore")),i.addEventListener("click",(()=>(e=>{e.isTrash=!1,Z(),X()})(e))),s.append(i,o),r.append(a,s),n.append(r)},ce=e=>{const t=document.createElement("legend");return t.classList.add(e),t},de=e=>{const t=document.createElement("label");return t.classList.add(`${e}-label`),t.setAttribute("for",`${e}-input`),t},ue=(e,t)=>{const n=document.createElement("input");return n.classList.add(`${e}-input`),n.setAttribute("type",t),n.setAttribute("id",`${e}-input`),n.setAttribute("name",`${e}-input`),n},le=e=>{const t=document.querySelector(".modal-form-fieldset"),n=ce("modal-form-legend"),r=de("modal-form-title"),a=ue("modal-form-title","text"),o=de("modal-form-date"),i=ue("modal-form-date","date"),s=de("modal-form-prio"),c=ue("modal-form-prio","checkbox");n.innerText=e,r.innerText="Name",o.innerText="Date",s.innerText="Important?",s.append(c),t.textContent="",t.append(n,r,a,o,i,s)},me=e=>{const t=document.querySelector(".modal-form-fieldset"),n=ce("modal-form-legend"),r=de("modal-form-title"),a=ue("modal-form-title","text"),o=de("modal-form-desc"),i=(e=>{const t=document.createElement("textarea");return t.classList.add(`${e}-input`),t.setAttribute("id",`${e}-input`),t.setAttribute("name",`${e}-input`),t})("modal-form-desc");n.innerText=e,r.innerText="Project Name",o.innerText="Project Description",t.textContent="",t.append(n,r,a,o,i)},he=e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),n=document.createElementNS("http://www.w3.org/2000/svg","path");switch(t.setAttribute("width","24px"),t.setAttribute("height","24px"),t.setAttribute("preserveAspectRatio","xMidYMid meet"),t.setAttribute("viewBox","0 0 24 24"),n.setAttribute("fill","currentColor"),e){case"delete":n.setAttribute("d","M7 21q-.825 0-1.412-.587Q5 19.825 5 19V6q-.425 0-.713-.287Q4 5.425 4 5t.287-.713Q4.575 4 5 4h4q0-.425.288-.713Q9.575 3 10 3h4q.425 0 .713.287Q15 3.575 15 4h4q.425 0 .712.287Q20 4.575 20 5t-.288.713Q19.425 6 19 6v13q0 .825-.587 1.413Q17.825 21 17 21ZM7 6v13h10V6Zm2 10q0 .425.288.712Q9.575 17 10 17t.713-.288Q11 16.425 11 16V9q0-.425-.287-.713Q10.425 8 10 8t-.712.287Q9 8.575 9 9Zm4 0q0 .425.288.712q.287.288.712.288t.713-.288Q15 16.425 15 16V9q0-.425-.287-.713Q14.425 8 14 8t-.712.287Q13 8.575 13 9ZM7 6v13V6Z");break;case"plus":n.setAttribute("d","M18 12.998h-5v5a1 1 0 0 1-2 0v-5H6a1 1 0 0 1 0-2h5v-5a1 1 0 0 1 2 0v5h5a1 1 0 0 1 0 2z");break;case"edit":n.setAttribute("d","M6 22q-.825 0-1.412-.587Q4 20.825 4 20V4q0-.825.588-1.413Q5.175 2 6 2h7.175q.4 0 .763.15q.362.15.637.425l4.85 4.85q.275.275.425.637q.15.363.15.763V12h-2V9h-4q-.425 0-.712-.288Q13 8.425 13 8V4H6v16h6v2Zm0-2V4v16Zm12.3-5.475l1.075 1.075l-3.875 3.85v1.05h1.05l3.875-3.85l1.05 1.05l-4 4q-.15.15-.338.225q-.187.075-.387.075H14.5q-.2 0-.35-.15q-.15-.15-.15-.35v-2.25q0-.2.075-.387q.075-.188.225-.338Zm3.175 3.175L18.3 14.525l1.45-1.45q.275-.275.7-.275q.425 0 .7.275l1.775 1.775q.275.275.275.7q0 .425-.275.7Z");break;case"restore":n.setAttribute("d","M18 22H6q-.825 0-1.412-.587Q4 20.825 4 20V4q0-.825.588-1.413Q5.175 2 6 2h7.175q.4 0 .763.15q.362.15.637.425l4.85 4.85q.275.275.425.637q.15.363.15.763V20q0 .825-.587 1.413Q18.825 22 18 22Zm0-2V8.85L13.15 4H6v16Zm-6-2.25q1.95 0 3.35-1.4q1.4-1.4 1.4-3.35q0-1.95-1.4-3.35q-1.4-1.4-3.35-1.4q-.95 0-1.775.35t-1.475.95v-.8q0-.325-.212-.538Q8.325 8 8 8q-.325 0-.537.212q-.213.213-.213.538v2.5q0 .425.287.712q.288.288.713.288h2.5q.325 0 .538-.213q.212-.212.212-.537q0-.325-.212-.538q-.213-.212-.538-.212H9.7q.425-.45 1.025-.725q.6-.275 1.275-.275q1.35 0 2.3.95q.95.95.95 2.3q0 1.35-.95 2.3q-.95.95-2.3.95q-.975 0-1.738-.512q-.762-.513-1.187-1.338q-.075-.175-.25-.287Q8.65 14 8.45 14q-.475 0-.712.325q-.238.325-.038.725q.575 1.2 1.725 1.95q1.15.75 2.575.75ZM6 20V4v16Z");break;case"arrow":n.setAttribute("d","M11.7 15.3q-.475.475-1.087.212Q10 15.25 10 14.575v-5.15q0-.675.613-.937q.612-.263 1.087.212l2.6 2.6q.15.15.225.325q.075.175.075.375t-.075.375q-.075.175-.225.325Z")}return t.append(n),t};function fe(e,t){const n=m(e);return isNaN(t)?p(e,NaN):t?(n.setDate(n.getDate()+t),n):n}const pe=JSON.parse(localStorage.getItem("todolist.todos"))||[],ge=(e,t,n,r)=>{const a=((e,t,n,r)=>({title:t,date:n,type:e,checked:!1,isImportant:r,isTrash:!1}))(e,t,n,r);pe.push(a),console.log(pe),xe()},we=e=>{e.isTrash?(pe.splice(e.index,1),xe()):(pe[e.index].isTrash=!0,xe())},ye=(e,t,n,r)=>{const a=pe[e];a.title=t,a.date=n,a.isImportant=r,xe()},be=(e,t)=>{pe[e].checked=t,setTimeout(xe(),2e3)},ve=e=>{pe.forEach(((t,n)=>{t.type==e.iD&&pe.splice(n,1)}))},qe=e=>{pe[e.index].isTrash=!1,xe()},xe=()=>{const e=document.querySelector(".main-container").getAttribute("data-id"),t=document.querySelector(".todo-container"),n=Te(e);t.textContent="",n.forEach((e=>(e=>{const t=document.querySelector(".main-container").getAttribute("data-id"),n=document.querySelector(".todo-container"),r=ne("todo-card"),a=(e=>{const t=document.createElement("input");return t.classList.add("todo-card-input"),t.setAttribute("type","checkbox"),t})(),o=ae("todo-card-title"),i=ae("todo-card-date"),s=oe("todo-card-edit"),c=oe("todo-card-delete"),d=ne("todo-btn-container");if(a.checked=e.checked,a.addEventListener("click",(()=>be(e.index,a.checked))),o.innerText=e.title,i.innerText=z(new Date(e.date),"dd/MM/y"),s.append(he("edit")),s.addEventListener("click",(()=>{(e=>{le("Edit todo");const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-date-input"),r=document.querySelector(".modal-form-prio-input");t.value=e.title,n.value=e.date,r.checked=e.isImportant,J.classList.remove("display-none"),U.addEventListener("submit",_),U.currentIndex=e.index})(e)})),c.append(he("delete")),c.addEventListener("click",(()=>we(e))),d.append(s,c),e.isImportant){const e=ae("todo-card-important");e.innerText="Important",r.append(e)}if(e.isTrash){const t=oe("todo-card-restore");t.append(he("restore")),t.addEventListener("click",(()=>qe(e))),d.insertBefore(t,d.lastChild)}if("Completed"===t||"Upcoming"===t||"Today"===t||"Trash"===t){const t=ae("todo-card-type");isNaN(e.type)?t.innerText=e.type:t.innerText=$[parseInt(e.type)].title,r.append(t)}r.append(a,o,i,d),n.append(r)})(e)))},Te=e=>{const t=document.querySelector(".todo-sort"),n=pe.filter(((n,r)=>{switch(n.index=r,e){case"Today":return n.date===z(new Date,"yyyy-MM-dd")&&!1===n.isTrash&&!1===n.checked;case"Upcoming":return ke().includes(n.date)&&!1===n.isTrash&&!1===n.checked;case"Trash":return!0===n.isTrash;case"Completed":return!0===n.checked&&!1===n.isTrash;default:return t&&"Important"===t.innerText?n.type===e&&!1===n.isTrash&&!0===n.isImportant&&!1===n.checked:n.type===e&&!1===n.isTrash&&!1===n.checked}}));return n.sort(((e,t)=>function(e,t){const n=m(e),r=m(t),a=n.getTime()-r.getTime();return a<0?-1:a>0?1:a}(new Date(e.date),new Date(t.date)))),n},ke=()=>{const e=function(e,t){const n=m(e.start),r=m(e.end);let a=+n>+r;const o=a?+n:+r,i=a?r:n;i.setHours(0,0,0,0);let s=t?.step??1;if(!s)return[];s<0&&(s=-s,a=!a);const c=[];for(;+i<=o;)c.push(m(i)),i.setDate(i.getDate()+s),i.setHours(0,0,0,0);return a?c.reverse():c}({start:fe(new Date,1),end:fe(new Date,7)});return e.forEach(((t,n)=>e.splice(n,1,z(t,"yyyy-MM-dd")))),e},Se=()=>{const e=document.querySelector(".main-container"),t=re("project-title"),n=ae("project-desc"),r=ne("todo-container"),a=ne("project-controls"),o=oe("todo-create"),i=oe("todo-sort");e.setAttribute("data-id","General"),t.innerText="General",n.innerText="A general list of todos",o.append(he("plus"),"Create Todo"),o.addEventListener("click",(()=>R())),i.innerText="All",i.addEventListener("click",(()=>{"All"===i.innerText?i.innerText="Important":i.innerText="All",xe()})),a.append(i,o),e.textContent="",e.append(t,n,a,r),xe()},Me=(e,t)=>{const n=document.querySelector(".main-container"),r=re("project-title"),a=ae("project-desc"),o=ne("project-title-container"),i=ne("todo-container"),s=ne("project-controls"),c=oe("todo-create"),d=oe("project-delete"),u=oe("project-edit"),l=oe("todo-sort");n.setAttribute("data-id",t),r.innerText=e.title,a.innerText=e.desc,c.append(he("plus"),"Create Todo"),c.addEventListener("click",(()=>R())),d.append(he("delete"),"Delete Project"),d.addEventListener("click",(()=>B(e,t))),u.append(he("delete"),"Edit Project"),u.addEventListener("click",(()=>(e=>{me("Create New Project");const t=document.querySelector(".modal-form-title-input"),n=document.querySelector(".modal-form-desc-input");t.value=e.title,n.value=e.desc,J.classList.remove("display-none"),U.addEventListener("submit",te),U.currentProject=e})(e))),l.innerText="All",l.addEventListener("click",(()=>{"All"===l.innerText?l.innerText="Important":l.innerText="All",xe()})),s.append(l,c),o.append(s,u,d),n.textContent="",n.append(o,a,s,i),xe()},Le=document.querySelector(".header-nav-btn"),Ee=document.querySelectorAll(".header-main-nav-link"),De=document.querySelector(".mobile-nav-btn");console.log(De),Le.addEventListener("click",(()=>{me("Create New Project"),U.addEventListener("submit",ee),J.classList.remove("display-none")})),De.addEventListener("click",(()=>{document.querySelector(".header").classList.toggle("is-active"),document.querySelector(".main-container").classList.toggle("is-active")})),Ee.forEach((e=>{e.addEventListener("click",(()=>{switch(console.log(e.innerText),e.innerText){case"General":Se();break;case"Today":(()=>{const e=document.querySelector(".main-container"),t=re("project-title"),n=ae("project-desc"),r=ne("todo-container");e.setAttribute("data-id","Today"),t.innerText="Today",n.innerText="All todos dated today",e.textContent="",e.append(t,n,r),xe()})();break;case"Upcoming":(()=>{const e=document.querySelector(".main-container"),t=re("project-title"),n=ae("project-desc"),r=ne("todo-container");e.setAttribute("data-id","Upcoming"),t.innerText="Upcoming",n.innerText="All upcoming todos in the next week",e.textContent="",e.append(t,n,r),xe()})();break;case"Completed":(()=>{const e=document.querySelector(".main-container"),t=re("project-title"),n=ae("project-desc"),r=ne("todo-container");e.setAttribute("data-id","Completed"),t.innerText="Completed",n.innerText="List of all the Completed Todos",e.textContent="",e.append(t,n,r),xe()})();break;case"Trash":(()=>{const e=document.querySelector(".main-container"),t=re("project-title"),n=ae("project-desc"),r=ne("todo-container"),a=ne("project-container"),o=oe("project-type");e.setAttribute("data-id","Trash"),t.innerText="Trash",n.innerText="All deleted todos & projects",o.innerText="Todos",a.classList.add("display-none"),o.addEventListener("click",(()=>{"Todos"===o.innerText?(o.innerText="Projects",document.querySelector(".project-container").classList.remove("display-none"),document.querySelector(".todo-container").classList.add("display-none")):(o.innerText="Todos",document.querySelector(".todo-container").classList.remove("display-none"),document.querySelector(".project-container").classList.add("display-none")),xe(),Z()})),e.textContent="",e.append(t,n,o,r,a),xe(),Z()})()}}))})),X(),Se()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,